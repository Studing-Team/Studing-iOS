//
//  HomeViewModel.swift
//  Studing
//
//  Created by ParkJunHyuk on 10/20/24.
//

import Foundation
import Combine


final class HomeViewModel: BaseViewModel {
    
    var sectionsData = CurrentValueSubject<[SectionType]?, Never>(nil)
    var selectedAssociationTitle = CurrentValueSubject<String, Never>("")
    
    var sectionDataDict: [SectionType: [any HomeSectionData]] = [:]
    
    // MARK: - Input
    
    struct Input {
        let associationTap: AnyPublisher<Int, Never>
        let headerRightButtonTap: AnyPublisher<SectionType, Never>
    }
    
    // MARK: - Output
    
    struct Output {
        let annouceHeaderText: AnyPublisher<String, Never>
        let headerRightButtonTap: AnyPublisher<SectionType, Never>
    }
    
    // MARK: - Private properties
    
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Public methods
    
    func transform(input: Input) -> Output {
        
        /// ÌïôÏÉùÌöåÎ•º ÌÉ≠ÌñàÏùÑ Îïå  sectionDataDict ÏóêÏÑú key Í∞íÏù¥ association Ïù∏ Ïùò Îç∞Ïù¥ÌÑ∞ Ï§ë name ÏùÑ Î∞òÌôò
        /// selectedAssociationTitle ÎùºÎäî CurrentValueSubject Ïóê name ÏùÑ Î≥¥ÎÇ¥Í≥†  Í≥µÏßÄÏÇ¨Ìï≠ Header Ïóê ÌïôÏÉùÌöå Ïù¥Î¶ÑÏùÑ Ìï†Îãπ
        let associationTitle = input.associationTap
            .compactMap { [weak self] index -> String? in
                guard let self else { return nil }
                
                if var associationData = self.sectionDataDict[.association] as? [AssociationModel] {
                    // Î™®Îì† Ìï≠Î™©Ïùò isSelectedÎ•º falseÎ°ú ÏÑ§Ï†ï
                    for i in 0..<associationData.count {
                        associationData[i].isSelected = (i == index)
                    }
                    
                    // ÏóÖÎç∞Ïù¥Ìä∏Îêú Îç∞Ïù¥ÌÑ∞Î•º Îã§Ïãú Ï†ÄÏû•
                    self.sectionDataDict[.association] = associationData
                    
                    // sectionsDataÎ•º ÏóÖÎç∞Ïù¥Ìä∏ÌïòÏó¨ UI Í∞±Ïã† Ìä∏Î¶¨Í±∞
                    if let currentSections = self.sectionsData.value {
                        self.sectionsData.send(currentSections)
                    }
                    
                    // ÏÑ†ÌÉùÎêú Ìï≠Î™©Ïùò Ïù¥Î¶Ñ Î∞òÌôò
                    return associationData[index].name
                }
                return nil
            }
            .handleEvents(receiveOutput: { [weak self] name in
                self?.selectedAssociationTitle.send(name)
            })
            .eraseToAnyPublisher()
        
        return Output(annouceHeaderText: associationTitle.eraseToAnyPublisher(),
                      headerRightButtonTap: input.headerRightButtonTap.eraseToAnyPublisher())
    }
}


extension HomeViewModel {
    func getMissAnnouce() {
        let annouceData = [MissAnnounceModel(userName: "ÏÉÅÏö∞", missAnnounceCount: 7)]
        
        sectionDataDict[.missAnnouce] = annouceData
    }
    
    func getMyAssociation() {
        
        let associationData = [AssociationModel(name: "Ï†ÑÏ≤¥", image: "AllAssociation", isSelected: true),
                               AssociationModel(name: "Ï¥ùÌïôÏÉùÌöå", image: "AllAssociation", isSelected: false),
                               AssociationModel(name: "Ï°∞ÌòïÎåÄÌïô", image: "AllAssociation", isSelected: false),
                               AssociationModel(name: "ÏÇ∞ÏóÖÎîîÏûêÏù∏", image: "AllAssociation", isSelected: false),
                               AssociationModel(name: "Í≥µÍ≥ºÎåÄÌïô", image: "AllAssociation", isSelected: false)]
        
        sectionDataDict[.association] = associationData
    }
    
    func getAnnouceData() {
        let annouceData = [AssociationAnnounceModel(title: "[üéâÏñ¥ÏùòÎåÄÎèôÏ†ú ÏïÑÌã∞Ïä§Ìä∏ ÎùºÏù∏ÏóÖ Í≥µÍ∞úüéâ]",
                                                    contents: "2024 Ïñ¥ÏùòÎåÄÎèôÏ†úÍ∞Ä Ïù¥Ï†ú Ï†ïÎßê ÏñºÎßà ÎÇ®ÏßÄ ÏïäÏïòÎäîÎç∞Ïöî! ÌïôÏö∞ Ïó¨Îü¨Î∂ÑÎì§Ïù¥ Í∞ÄÏû• Í∂ÅÍ∏àÌï¥ÌïòÏã§ ÏïÑÌã∞Ïä§Ìä∏ Îùº",
                                                    days: "2024ÎÖÑ 09Ïõî 19Ïùº",
                                                    favoriteCount: 10,
                                                    bookmarkCount: 5,
                                                    watchCount: 30,
                                                    isFavorite: false,
                                                    isBookmark: false),
                           AssociationAnnounceModel(title: "[üéâÏñ¥ÏùòÎåÄÎèôÏ†ú ÏïÑÌã∞Ïä§Ìä∏ ÎùºÏù∏ÏóÖ Í≥µÍ∞úüéâ]",
                                                                       contents: "2024 Ïñ¥ÏùòÎåÄÎèôÏ†úÍ∞Ä Ïù¥Ï†ú Ï†ïÎßê ÏñºÎßà ÎÇ®ÏßÄ ÏïäÏïòÎäîÎç∞Ïöî! ÌïôÏö∞ Ïó¨Îü¨Î∂ÑÎì§Ïù¥ Í∞ÄÏû• Í∂ÅÍ∏àÌï¥ÌïòÏã§ ÏïÑÌã∞Ïä§Ìä∏ Îùº",
                                                                       days: "2024ÎÖÑ 09Ïõî 19Ïùº",
                                                                       favoriteCount: 10,
                                                                       bookmarkCount: 5,
                                                                       watchCount: 30,
                                                                       isFavorite: false,
                                                                       isBookmark: false)]
        
        sectionDataDict[.annouce] = annouceData
    }
    
    func getMyBookmark() {
        
        let bookmarkData = [BookmarkModel(association: "Ï¥ùÌïôÏÉùÌöå",
                                          title: "[üéâÏÇ¨Ï†Ñ Ïù¥Î≤§Ìä∏ ÏïàÎÇ¥üéâ]",
                                          contents: "Îã§Í∞ÄÏò§Îäî 2024 ÏÑúÏö∏Í≥ºÌïôÍ∏∞Ïà†ÎåÄÌïôÍµê...",
                                          days: "2024ÎÖÑ 09Ïõî 19Ïùº"),BookmarkModel(association: "Ï¥ùÌïôÏÉùÌöå",
                                                                               title: "[üéâÏÇ¨Ï†Ñ Ïù¥Î≤§Ìä∏ ÏïàÎÇ¥üéâ]",
                                                                               contents: "Îã§Í∞ÄÏò§Îäî 2024 ÏÑúÏö∏Í≥ºÌïôÍ∏∞Ïà†ÎåÄÌïôÍµê...",
                                                                               days: "2024ÎÖÑ 09Ïõî 19Ïùº")]
        
        sectionDataDict[.bookmark] = bookmarkData
    }
    
    func getMySections() {
        var currentSections: [SectionType] = []

        // ÏÑπÏÖò ÌÉÄÏûÖ ÏàúÏÑúÎåÄÎ°ú Ï∂îÍ∞Ä
        for type in SectionType.allCases {
            if let items = sectionDataDict[type], !items.isEmpty {
                currentSections.append(type)
            }
        }

        sectionsData.send(currentSections.isEmpty ? nil : currentSections)
    }
}
