//
//  UIViewController+.swift
//  Studing
//
//  Created by ParkJunHyuk on 9/16/24.
//

import UIKit

extension UIViewController {
    /// ÌôîÎ©¥Î∞ñ ÌÑ∞ÏπòÏãú ÌÇ§Î≥¥ÎìúÎ•º ÎÇ¥Î†§ Ï£ºÎäî Î©îÏÑúÎìú
    func hideKeyboard() {
        let tap: UITapGestureRecognizer = UITapGestureRecognizer(target: self,
                                                                 action: #selector(UIViewController.dismissKeyboard))
        tap.cancelsTouchesInView = false
        view.addGestureRecognizer(tap)
    }
    
    @objc func dismissKeyboard() {
        view.endEditing(true)
    }
}

extension UIViewController {
    func setupCustomNavigationBar() {
        let appearance = UINavigationBarAppearance()
        appearance.configureWithOpaqueBackground()
        appearance.shadowColor = .clear
        appearance.backgroundColor = .yellow
        
        navigationController?.navigationBar.standardAppearance = appearance
        navigationController?.navigationBar.scrollEdgeAppearance = appearance
        
        // Ïª®ÌÖåÏù¥ÎÑà Î∑∞ ÏÉùÏÑ±
        let customView = UIView(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 49))
        customView.backgroundColor = .red
        
        var config = UIButton.Configuration.plain()
        config.baseForegroundColor = .black50
        config.image = UIImage(systemName: "chevron.backward")
        config.imagePlacement = .leading
        config.imagePadding = 10
        
        var titleAttr = AttributedString("ÌïôÏÉùÌöå Í≥µÏßÄ Î¶¨Ïä§Ìä∏")
        titleAttr.font = .interSubtitle1()
        titleAttr.foregroundColor = .black50
        config.attributedTitle = titleAttr
        
        let button = UIButton(configuration: config)
        button.addTarget(self, action: #selector(backNavTapped), for: .touchUpInside)
        
        // Î≤ÑÌäºÏùÑ Ïª®ÌÖåÏù¥ÎÑà Î∑∞Ïóê Ï∂îÍ∞Ä
        customView.addSubview(button)
        
        // SnapKitÏúºÎ°ú Î≤ÑÌäº ÏúÑÏπò Ï°∞Ï†ï
        button.snp.makeConstraints {
            $0.leading.equalToSuperview()
            $0.bottom.equalToSuperview().offset(-8) // ÌïòÎã®ÏóêÏÑú 8Ìè¨Ïù∏Ìä∏ ÏúÑÎ°ú
            $0.height.equalTo(24)
        }
        
        navigationItem.leftBarButtonItem = UIBarButtonItem(customView: customView)
    }
    
    @objc private func backNavTapped() {
        navigationController?.popViewController(animated: true)
    }
}

/// ÌÇ§Î≥¥Îìú ÌëúÏãúÏóê Îî∞Î•∏ ÌôîÎ©¥ Ï°∞Ï†ïÏùÑ Ï≤òÎ¶¨ÌïòÎäî UIViewController ÌôïÏû•
extension UIViewController {
   /// ÌÇ§Î≥¥Îìú Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨Î•º ÏúÑÌïú ÏÑ§Ï†ïÏùÑ ÏàòÌñâÌïòÎäî Î©îÏÑúÎìú
   /// - Parameter spacing: ÌÇ§Î≥¥ÎìúÏôÄ ÌÖçÏä§Ìä∏ÌïÑÎìú ÏÇ¨Ïù¥Ïùò Ïó¨Î∞± (Í∏∞Î≥∏Í∞í: 40pt)
   func setupKeyboardHandling(with spacing: CGFloat = 40) {
       // ÌÇ§Î≥¥ÎìúÍ∞Ä ÎÇòÌÉÄÎÇ† ÎïåÏùò ÏïåÎ¶º observer Îì±Î°ù
       NotificationCenter.default.addObserver(
           self,                                        // ÌòÑÏû¨ ViewControllerÎ•º observerÎ°ú Îì±Î°ù
           selector: #selector(handleKeyboardWillShow), // ÌÇ§Î≥¥Îìú ÌëúÏãú Ïãú Ìò∏Ï∂úÎê† Î©îÏÑúÎìú
           name: UIResponder.keyboardWillShowNotification, // ÌÇ§Î≥¥Îìú ÌëúÏãú ÏïåÎ¶º
           object: nil                                  // ÌäπÏ†ï Í∞ùÏ≤¥Ïùò ÏïåÎ¶ºÎßå Î∞õÏßÄ ÏïäÍ≥† Î™®Îì† ÏïåÎ¶º ÏàòÏã†
       )
       
       // ÌÇ§Î≥¥ÎìúÍ∞Ä ÏÇ¨ÎùºÏßà ÎïåÏùò ÏïåÎ¶º observer Îì±Î°ù
       NotificationCenter.default.addObserver(
           self,
           selector: #selector(handleKeyboardWillHide),
           name: UIResponder.keyboardWillHideNotification,
           object: nil
       )
       
       // ÌôîÎ©¥ ÌÑ∞Ïπò Ïãú ÌÇ§Î≥¥ÎìúÎ•º Ïà®Í∏∞Í∏∞ ÏúÑÌïú Ï†úÏä§Ï≤ò Ï∂îÍ∞Ä
       let tapGesture = UITapGestureRecognizer(
           target: self,
           action: #selector(dismissKeyboard)
       )
       view.addGestureRecognizer(tapGesture)
   }
   
   /// ÌÇ§Î≥¥ÎìúÍ∞Ä ÎÇòÌÉÄÎÇ† Îïå Ìò∏Ï∂úÎêòÎäî Î©îÏÑúÎìú
   /// - Parameter notification: ÌÇ§Î≥¥Îìú Í¥ÄÎ†® Ï†ïÎ≥¥Î•º Ìè¨Ìï®Ìïú ÏïåÎ¶º Í∞ùÏ≤¥
   @objc private func handleKeyboardWillShow(_ notification: NSNotification) {
       // notificationÏóêÏÑú ÌÇ§Î≥¥Îìú ÌÅ¨Í∏∞ÏôÄ Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÍ∞Ñ Ï∂îÏ∂ú
       guard let keyboardFrame: NSValue = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue,
             let duration: Double = notification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double else {
           return
       }
       
       // ÌÇ§Î≥¥ÎìúÏùò Ïã§Ï†ú ÎÜíÏù¥ Í≥ÑÏÇ∞
       let keyboardHeight = keyboardFrame.cgRectValue.height
       print("‚å®Ô∏è Keyboard height: \(keyboardHeight)")
       
       // ÌòÑÏû¨ Ìè¨Ïª§Ïä§Îêú ÌÖçÏä§Ìä∏ÌïÑÎìú Ï∞æÍ∏∞
       if let activeField = view.firstResponder as? UITextField {
           // ÌÖçÏä§Ìä∏ÌïÑÎìúÏùò Ï¢åÌëúÎ•º ÌòÑÏû¨ viewÏùò Ï¢åÌëúÍ≥ÑÎ°ú Î≥ÄÌôò
           let fieldFrame = activeField.convert(activeField.bounds, to: view)
           print("üì± Field frame: \(fieldFrame)")
           
           // ÌÖçÏä§Ìä∏ÌïÑÎìú ÌïòÎã®Î∂ÄÌÑ∞ ÌôîÎ©¥ ÌïòÎã®ÍπåÏßÄÏùò Í±∞Î¶¨ Í≥ÑÏÇ∞
           let distanceToBottom = view.frame.height - (fieldFrame.origin.y + fieldFrame.height)
           print("‚ÜïÔ∏è Distance to bottom: \(distanceToBottom)")
           
           // ÌÇ§Î≥¥ÎìúÏóê ÏùòÌï¥ Í∞ÄÎ†§ÏßÄÎäî Í≥µÍ∞Ñ Í≥ÑÏÇ∞ (Ïó¨Ïú† Í≥µÍ∞Ñ 40pt Ï∂îÍ∞Ä)
           let collapseSpace = keyboardHeight - distanceToBottom + 80
           print("üìè Collapse space: \(collapseSpace)")
           
           // ÌÖçÏä§Ìä∏ÌïÑÎìúÍ∞Ä ÌÇ§Î≥¥ÎìúÏóê Í∞ÄÎ†§Ïßà Í≤ΩÏö∞ÏóêÎßå ÌôîÎ©¥ÏùÑ ÏúÑÎ°ú Ïù¥Îèô
           if collapseSpace > 0 {
               // ÏÑ§Ï†ïÎêú ÏãúÍ∞ÑÎèôÏïà Î∂ÄÎìúÎüΩÍ≤å ÌôîÎ©¥ Ïù¥Îèô Ïï†ÎãàÎ©îÏù¥ÏÖò Ïã§Ìñâ
               UIView.animate(withDuration: duration) {
                   self.view.frame.origin.y = -collapseSpace  // ÌôîÎ©¥ÏùÑ ÏúÑÎ°ú Ïù¥Îèô
                   print("‚¨ÜÔ∏è Moving view up by: \(collapseSpace)")
               }
           }
       }
   }
   
   /// ÌÇ§Î≥¥ÎìúÍ∞Ä ÏÇ¨ÎùºÏßà Îïå Ìò∏Ï∂úÎêòÎäî Î©îÏÑúÎìú
   /// - Parameter notification: ÌÇ§Î≥¥Îìú Í¥ÄÎ†® Ï†ïÎ≥¥Î•º Ìè¨Ìï®Ìïú ÏïåÎ¶º Í∞ùÏ≤¥
   @objc private func handleKeyboardWillHide(_ notification: NSNotification) {
       // notificationÏóêÏÑú Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÍ∞Ñ Ï∂îÏ∂ú
       guard let duration: Double = notification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double else {
           return
       }
       
       print("‚¨áÔ∏è Moving view back to original position")
       // ÏÑ§Ï†ïÎêú ÏãúÍ∞ÑÎèôÏïà Î∂ÄÎìúÎüΩÍ≤å ÌôîÎ©¥ÏùÑ ÏõêÎûò ÏúÑÏπòÎ°ú ÎêòÎèåÎ¶¨Îäî Ïï†ÎãàÎ©îÏù¥ÏÖò Ïã§Ìñâ
       UIView.animate(withDuration: duration) {
           self.view.frame.origin.y = 0  // ÌôîÎ©¥ÏùÑ ÏõêÎûò ÏúÑÏπòÎ°ú Î≥µÏõê
       }
   }
    
    func showConfirmAlert(mainTitle: String, subTitle: String, confirmTitle: String, centerButtonHandler: (() -> Void)? = nil) {
        
        let customAlertViewController = CustomAlertViewController(
            alertType: .onlyConfirm, mainTitle: mainTitle,
            subTitle: subTitle, confirmTitle: confirmTitle,
            centerButtonHandler: centerButtonHandler)
        
        customAlertViewController.modalPresentationStyle = .overFullScreen
        present(customAlertViewController, animated: false)
    }
    
    func showConfirmCancelAlert(mainTitle: String, subTitle: String, rightButtonTitle: String, leftButtonTitle: String, leftButtonHandler: (() -> Void)? = nil, rightButtonHandler: (() -> Void)? = nil) {
        
        let customAlertViewController = CustomAlertViewController(
            alertType: .confirmCancel, mainTitle: mainTitle,
            subTitle: subTitle, rightButtonTitle: rightButtonTitle, leftButtonTitle: leftButtonTitle, leftButtonHandler: leftButtonHandler , rightButtonHandler: rightButtonHandler)
        
        customAlertViewController.modalPresentationStyle = .overFullScreen
        present(customAlertViewController, animated: false)
    }
    
    func showBookmarkToastMessage(isBookmark: Bool) {
        let toastView = ToastMessageView(isBookmark: isBookmark)
        view.addSubview(toastView)
        
        // ÏúÑÏπò ÏÑ§Ï†ï
        toastView.snp.makeConstraints {
            $0.centerX.equalToSuperview()
            $0.bottom.equalToSuperview().inset(view.convertByHeightRatio(97))
        }
        
        // Ïï†ÎãàÎ©îÏù¥ÏÖò
        toastView.alpha = 0
        UIView.animate(withDuration: 0.3) {
            toastView.alpha = 1
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            UIView.animate(withDuration: 0.3, animations: {
                toastView.alpha = 0
            }, completion: { _ in
                toastView.removeFromSuperview()
            })
        }
    }
    
}

